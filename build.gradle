plugins {
    id 'java'
    id 'java-library'
    id 'maven' // See https://central.sonatype.org/publish/publish-gradle/
    id 'signing' // See https://docs.gradle.org/current/userguide/signing_plugin.html
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.4.31'
}

group 'io.github.orienteering-oss'
archivesBaseName = "iofXml"
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def generated_dir = "src/main/java"

sourceSets {
    generated {
        java.srcDir "$generated_dir"
    }
}

dependencies {
    compile sourceSets.generated.output

    // Generated code depends on the JAXB API, which is removed from base Java in JDK 11
    compile "org.glassfish.jaxb:jaxb-runtime:2.3.3"
    generatedCompile "org.glassfish.jaxb:jaxb-runtime:2.3.3"
}


// XJC tasks

// JAXB configuration holds classpath for running the JAXB XJC compiler
configurations {
    jaxb
}

dependencies {
    jaxb "org.glassfish.jaxb:jaxb-xjc:2.3.3"
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-jsonSchema', version: '2.9.8'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

// Cookie cutter function for defining multiple XJC tasks
def addXjcTask(taskName, schema, pkg, dest) {

    // If you haven't already, create the generated output dir before running XJC or it will fail
    file(dest).mkdirs()

    // The main XJC task, calls XJCFacade which is the entry point of the XJC JAR
    tasks.create(name: taskName, type: JavaExec) {

        classpath configurations.jaxb
        main 'com.sun.tools.xjc.XJCFacade'

        // To explore available args, download the XJC JAR and run java -jar jaxb-xjc.jar --help
        args schema, "-p", pkg, "-d", dest
    }

    // Add a dependency on the new task so it gets invoked
    compileGeneratedJava.dependsOn tasks.getByName(taskName)
}

// Add all the XJC tasks you need

addXjcTask("iof_v2",
        "src/main/resources/iof_v2.xsd",
        "${archivesBaseName}.v2",
        "$generated_dir")

addXjcTask("iof_v3",
        "src/main/resources/iof_v3.xsd",
        "${archivesBaseName}.v3",
        "$generated_dir")

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'iofXml'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Java classes generated from IOF XSD v3 and v2'
                url 'https://github.com/orienteering-oss/iof-xml'

                scm {
                    connection 'scm:https://github.com/orienteering-oss/iof-xml.git'
                    developerConnection 'scm:https://github.com/orienteering-oss/iof-xml.git'
                    url 'https://github.com/orienteering-oss/iof-xml'
                }

                licenses {
                    license {
                        name 'GNU General Public License v3.0'
                        url 'https://github.com/orienteering-oss/iof-xml/blob/main/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'mikaello'
                        name 'mikeallo'
                        email 'orienteering.oss@gmail.com'
                    }
                }
            }
        }
    }
}

mainClassName = "${archivesBaseName}.MainKt"