plugins {
    id 'java'
    id 'java-library'

    id 'maven-publish' // NB: previously used 'maven', that is deprecated
    // See
    // https://central.sonatype.org/publish/publish-gradle/
    // https://medium.com/@nmauti/sign-and-publish-on-maven-central-a-project-with-the-new-maven-publish-gradle-plugin-22a72a4bfd4b
    // https://github.com/jmini/html-publish-helper/blob/master/build.gradle

    id 'signing' // See https://docs.gradle.org/current/userguide/signing_plugin.html
    id 'application'
    id 'org.jetbrains.dokka' version '1.7.10'
    id 'org.jetbrains.kotlin.jvm' version '1.7.10'
}

group 'io.github.orienteering-oss'
archivesBaseName = "iofXml"
version '1.3.6-SNAPSHOT'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
    mavenCentral()
}

def generated_dir = "src/main/java"
sourceSets {
    generated {
        java.srcDir "$generated_dir"
    }
}

// JAXB configuration holds classpath for running the JAXB XJC compiler
configurations {
    jaxb
}

dependencies {
    jaxb "org.glassfish.jaxb:jaxb-xjc:4.0.1"
    jaxb "org.glassfish.jaxb:jaxb-runtime:4.0.1" // See also https://github.com/bjornvester/xjc-gradle-plugin/issues/21#issuecomment-904518682

    // Generated code depends on the JAXB API, which is removed from base Java in JDK 11
    generatedImplementation "org.glassfish.jaxb:jaxb-runtime:4.0.1"
    implementation "org.glassfish.jaxb:jaxb-runtime:4.0.1"
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0' // In JAXB v3, 'javax.xml.bind' was moved to 'jakarta.xml.bind'

    // The generated IOF v2/3 files
    implementation sourceSets.generated.output

    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-jsonSchema', version: '2.13.4'

    testImplementation platform("org.junit:junit-bom:5.9.0")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}

test {
    useJUnitPlatform()
}

// Cookie cutter function for defining multiple XJC tasks
def addXjcTask(taskName, schema, pkg, dest) {

    // If you haven't already, create the generated output dir before running XJC or it will fail
    file(dest).mkdirs()

    // The main XJC task, calls XJCFacade which is the entry point of the XJC JAR
    tasks.create(name: taskName, type: JavaExec) {

        classpath configurations.jaxb
        mainClass = 'com.sun.tools.xjc.XJCFacade'

        // To explore available args, download the XJC JAR and run java -jar jaxb-xjc.jar --help
        args schema, "-p", pkg, "-d", dest, "-no-header" // no-header removes timestamp header in each file
    }

    // Add a dependency on the new task so it gets invoked (depends on compilation)
    //compileGeneratedJava.dependsOn tasks.getByName(taskName) // using 'generateSources' instead for now
}

// Add all the XJC tasks you need
addXjcTask("iof_v2",
        "src/main/resources/iof_v2.xsd",
        "${archivesBaseName}.v2",
        "$generated_dir")

addXjcTask("iof_v3",
        "src/main/resources/iof_v3.xsd",
        "${archivesBaseName}.v3",
        "$generated_dir")

tasks.register('generateSources') {
    description "Generate Java sources fram XSD files"
    dependsOn tasks.getByName('iof_v2')
    dependsOn tasks.getByName('iof_v3')
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version
            artifacts = [javadocJar, sourcesJar]
            from components.java

            pom {
                name = 'iofXml'
                description = 'Java classes generated from IOF XSD v3 and v2'
                url = 'https://github.com/orienteering-oss/iof-xml'

                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://github.com/orienteering-oss/iof-xml/blob/main/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'mikaello'
                        name = 'mikaello'
                        email = 'eeeeeeeefeeeeeeeeee+ooosss@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:https://github.com/orienteering-oss/iof-xml.git'
                    developerConnection = 'scm:https://github.com/orienteering-oss/iof-xml.git'
                    url = 'https://github.com/orienteering-oss/iof-xml'
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"

            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo

            //url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = ossrhUsername // maybe use findProperty("ossrhUsername") ?
                password = ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

dokkaHtml {
    dokkaSourceSets {
        configureEach {
            // See https://kotlin.github.io/dokka/1.7.10/user_guide/gradle/usage/#configuration-options
            includes.from("src/main/README.md")
            samples.from("src/test/kotlin/iofXml")
        }
    }
}

mainClassName = "${archivesBaseName}.MainKt"
kotlin {
  jvmToolchain {
    languageVersion.set(JavaLanguageVersion.of("11"))
  }
}